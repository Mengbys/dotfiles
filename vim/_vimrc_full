""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Maintainer: LXH
"  Last change: 2022-06-24
"
"  CONTENTS:
"  1. Basic setting
"  2. Plugin install
"  3. Colorscheme
"  4. Plugin setting
"  5. F-key function
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==>1. Basic setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Display Chinese characters
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
let $LANG='en'
set langmenu=en

" set tabstop=4     " A tab equals 4 spaces
" set shiftwidth=4  " The width of suojin is 4 space
" set expandtab     " Use space replace tab
" set softtabstop=4 " Del tabs one by one when use backspace
set autoindent
set smartindent
set nocompatible " No compatible with vi
set number
set ignorecase
filetype on
filetype plugin on
set cursorline " Highlight current line
set noundofile
set nobackup
set noswapfile
set nohls                      " Cancel highlight after search
set spr                        " Split to right when vertical split
set sb                         " Split to bottom when horizon split
set autoread                   " Auto refresh when file change
set signcolumn=number          " Sign show in number column
set completeopt-=preview       " Close preview windows
set whichwrap=<,>,[,]          " Alow arrow keys jump between lines automatically
set backspace=indent,eol,start " Allow backspace delete previous lines, have in `vimrc_example.vim`
set linespace=0                " the space between lines
set fileformat=unix
set wildmenu

" Autocommand
" autocmd filetype markdown,text setlocal textwidth=78
autocmd filetype help,vim-plug,startuptime nnoremap <silent><buffer> q :exit<CR>
autocmd filetype startify setlocal nowrap
autocmd FileType startify set showtabline=0 | autocmd BufLeave <buffer> set showtabline=2
autocmd FileType startify set laststatus=0 | autocmd BufLeave <buffer> set laststatus=2
autocmd FileType startify set noruler | autocmd BufLeave <buffer> set ruler
autocmd FileType markdown setlocal list | setlocal listchars=trail:\ 

" Key mapping
let mapleader = ","
" Buffer operation
nnoremap <silent> <c-p> :bp!<cr>
nnoremap <silent> <c-n> :bn!<cr>
nnoremap <silent> <leader>d :bd<cr>
" Window operation
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <c-down> <c-w>J
nnoremap <c-up> <c-w>K
nnoremap <c-left> <c-w>H
nnoremap <c-right> <c-w>L
" Yank to clipboard
vnoremap <leader><leader>y "+y
nnoremap <leader><leader>ay ggVG"+y
" Paste from clipboard
nnoremap <leader><leader>p "+p
nnoremap <leader><leader>P "+P
nnoremap <leader>h :Startify<cr>
" inoremap <c-e> <end>
" nnoremap <cr> I<cr><esc>
" nnoremap <bs> I<bs><esc>
" Tab operation
nnoremap <leader>e :tabn<cr>
nnoremap <leader>q :tabp<cr>
nnoremap <leader>w :tabc<cr>
nnoremap <leader>s :w<cr>
nnoremap <leader>cd :cd %:p:h<cr>
inoremap jj <esc>

" Gui setting
if has("gui_running")
  " Solve the display problem of gvim in Chinese Windows
  source $VIMRUNTIME/delmenu.vim
  source $VIMRUNTIME/menu.vim

  " Fonts
  set guifont=DejavuSansMono_NF:h14:cANSI
  set guifontwide=Microsoft_YaHei_Mono:h14:cGB2312

  " Make a clean ui
  set guioptions-=m           " Eliminate menu
  set guioptions-=T           " Eliminate toolbar
  set guioptions-=L           " Eliminate left scroll bar
  set guioptions-=r           " Eliminate right scroll bar
  set guioptions-=b           " Eliminate bottom scroll bar
  set guioptions-=e           " Eliminate tabline

  set vb t_vb=            " Close noise
  au GuiEnter * set t_vb= " Close window blink
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==>2. Plug install
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use vim-plug install plugins
" Change the dir below when change platform
call plug#begin("D:\\Vim\\vim82\\plugged")
" -->Colorscheme
Plug 'https://github.com/altercation/vim-colors-solarized.git'
Plug 'https://github.com/overcache/NeoSolarized.git'
Plug 'https://github.com/cocopon/iceberg.vim.git'
Plug 'https://github.com/jaredgorski/fogbell.vim.git'
Plug 'https://github.com/pineapplegiant/spaceduck'
Plug 'https://github.com/liuchengxu/space-vim-dark'
Plug 'https://github.com/morhetz/gruvbox.git'
Plug 'https://github.com/tomasr/molokai.git'
Plug 'https://github.com/chriskempson/base16-vim.git'
Plug 'https://github.com/ghifarit53/tokyonight-vim.git'
Plug 'https://github.com/jonathanfilip/vim-lucius.git'
Plug 'https://github.com/sainnhe/gruvbox-material.git'
Plug 'https://github.com/sainnhe/edge.git'
" -->Highlight, and set indent according to filetype. But work badly with C-family files.
Plug 'https://github.com/sheerun/vim-polyglot.git'
" -->Homepage
Plug 'https://github.com/mhinz/vim-startify.git'
" -->Parenthsis completion
Plug 'https://github.com/jiangmiao/auto-pairs.git'
" -->Filetree
Plug 'https://github.com/preservim/nerdtree.git'
Plug 'https://github.com/tiagofumo/vim-nerdtree-syntax-highlight.git'
" -->Statusline, tabline
Plug 'https://github.com/vim-airline/vim-airline.git'
Plug 'https://github.com/vim-airline/vim-airline-themes.git'
" Plug 'https://github.com/itchyny/lightline.vim'
" Plug 'https://github.com/fholgado/minibufexpl.vim'
" -->Move fastly
Plug 'https://github.com/easymotion/vim-easymotion.git'
" -->Move smoothly
Plug 'https://github.com/terryma/vim-smooth-scroll.git'
" -->Auto align
Plug 'https://github.com/godlygeek/tabular.git'
" -->Comment helper
Plug 'https://github.com/tpope/vim-commentary.git'
" -->File icon
" Plug 'https://github.com/ryanoasis/vim-devicons.git'
" -->File search
Plug 'https://github.com/Yggdroot/LeaderF.git', { 'do': ':LeaderfInstallCExtension' }
" -->Code completion
" Plug 'ycm-core/YouCompleteMe'
" -->Block completion
Plug 'https://github.com/SirVer/ultisnips.git'
Plug 'https://github.com/mengbys/vim-snippets.git'
" -->Pairs operation
Plug 'https://github.com/tpope/vim-surround.git'
" -->Show classes, variables
" Plug 'https://github.com/preservim/tagbar.git'
Plug 'https://github.com/liuchengxu/vista.vim'
" -->Can rename tab
" Plug 'https://github.com/gcmt/taboo.vim.git'
" -->Select region easily
Plug 'https://github.com/terryma/vim-expand-region.git'
" -->Add a 'line' to wenben object
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
" -->More useful f,F,t,T
Plug 'https://github.com/rhysd/clever-f.vim.git'
" -->Set relativenumber when needed
Plug 'https://github.com/jeffkreeftmeijer/vim-numbertoggle.git'
" -->Focus mode
Plug 'https://github.com/junegunn/goyo.vim'
" Plug 'https://github.com/amix/vim-zenroom2'
" -->Use LSP to check the code or make completion
Plug 'https://github.com/prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
" Plug 'prabirshrestha/asyncomplete-file.vim'
" -->Show startup time
Plug 'dstein64/vim-startuptime'
" -->Markdown preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
call plug#end()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==>3. Colorscheme
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! Patch_colors()
    set fillchars+=vert:\│
    hi VertSplit cterm=NONE guibg=NONE guifg=NONE
    " hi StartifyHeader guifg=#ff0080
endfunc
    
autocmd! Colorscheme * call Patch_colors()

set background=dark
if has("gui_running")
    colorscheme gruvbox
    let g:airline_theme="gruvbox"
    " let g:gruvbox_contrast_dark="soft"
    " let g:gruvbox_contrast_light="soft"
    " let g:neosolarized_vertSplitBgTrans = 1
else
    set termguicolors
    colorscheme iceberg
    let g:airline_theme="dark_change"
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==>4. Plug setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" airline
" let g:airline_theme="solarized"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show=1
" Wether use powerline_fonts to beautify airline
let g:airline_powerline_fonts = 0
let g:airline_symbols_ascii = 1
let g:airline#extensions#whitespace#enabled = 0
" let g:airline_section_b = '%{strftime("%H:%M")}'
let g:airline#extensions#tabline#left_sep = ''
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#tabline#right_sep = ''
let g:airline#extensions#tabline#right_alt_sep = ''

" startify
" let g:startify_custom_header =[
"     \'          ▀████▀▄▄              ▄█ ',
"     \'            █▀    ▀▀▄▄▄▄▄    ▄▄▀▀█ ',
"     \'    ▄        █          ▀▀▀▀▄  ▄▀  ',
"     \'   ▄▀ ▀▄      ▀▄              ▀▄▀  ',
"     \'  ▄▀    █     █▀   ▄█▀▄      ▄█    ',
"     \'  ▀▄     ▀▄  █     ▀██▀     ██▄█   ',
"     \'   ▀▄    ▄▀ █   ▄██▄   ▄  ▄  ▀▀ █  ',
"     \'    █  ▄▀  █    ▀██▀    ▀▀ ▀▀  ▄▀  ',
"     \'   █   █  █      ▄▄           ▄▀   ',
"     \]
let g:startify_custom_header=[
    \'',
    \'   ⣿⡇⣿⣿⣿⠛⠁⣴⣿⡿⠿⠧⠹⠿⠘⣿⣿⣿⡇⢸⡻⣿⣿⣿⣿⣿⣿⣿ ',
    \'   ⢹⡇⣿⣿⣿⠄⣞⣯⣷⣾⣿⣿⣧⡹⡆⡀⠉⢹⡌⠐⢿⣿⣿⣿⡞⣿⣿⣿ ',
    \'   ⣾⡇⣿⣿⡇⣾⣿⣿⣿⣿⣿⣿⣿⣿⣄⢻⣦⡀⠁⢸⡌⠻⣿⣿⣿⡽⣿⣿ ',
    \'   ⡇⣿⠹⣿⡇⡟⠛⣉⠁⠉⠉⠻⡿⣿⣿⣿⣿⣿⣦⣄⡉⠂⠈⠙⢿⣿⣝⣿ ',
    \'   ⠤⢿⡄⠹⣧⣷⣸⡇⠄⠄⠲⢰⣌⣾⣿⣿⣿⣿⣿⣿⣶⣤⣤⡀⠄⠈⠻⢮ ',
    \'   ⣿⣿⣧⠄⢘⢻⣿⡇⢀⣀⠄⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠄⢀ ',
    \'   ⣿⣿⣿⡆⢸⣿⣿⣿⣬⣭⣴⣿⣿⣿⣿⣿⣿⣿⣯⠝⠛⠛⠙⢿⡿⠃⠄⢸ ',
    \'   ⣿⣿⢿⣿⡀⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⡾⠁⢠⡇⢀ ',
    \'   ⣿⣿⢸⣿⡇⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⣫⣻⡟⢀⠄⣿⣷⣾ ',
    \'   ⣿⣿⢸⣿⡇⠄⠈⠙⠿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⡿⢠⠊⢀⡇⣿⣿ ',
    \'   ⣿⣿ ⣿⡇⢀⡲⠄⠄⠈⠙⠻⢿⣿⣿⠿⠿⠟⠛⠋⠁⣰⠇ ⢸⣿⣿⣿ ',
    \'   ⣿⣿ ⣿⡇⢬⡻⡇⡄⠄⠄⠄⡰⢖⠔⠉⠄⠄⠄⠄⣼⠏  ⢸⣿⣿⣿ ',
    \'   ⣿⣿⣿ ⡇⠄⠙⢌⢷⣆⡀⡾⡣⠃⠄⠄⠄⠄⠄⣼⡟    ⢿⣿⣿ ',
    \'',
    \]
" hi StartifyHeader guifg = pink

" lightline
" set laststatus=2

" MBE
" let g:miniBufExplBRSplit = 0
" let g:miniBufExplStatusLineText = ''

" nerdtree
nnoremap <silent> <leader>n :NERDTreeToggle<cr>
let g:NERDTreeFileExtensionHighlightFullName = 1
let g:NERDTreeExactMatchHighlightFullName = 1
let g:NERDTreePatternMatchHighlightFullName = 1
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" netrw


" easymotion
map ;; <Plug>(easymotion-prefix)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  ;w <Plug>(easymotion-bd-w)
nmap ;w <Plug>(easymotion-overwin-w)
map  ;e <Plug>(easymotion-bd-e)
map  ;f <Plug>(easymotion-bd-f)
nmap ;f <Plug>(easymotion-overwin-f)
map  ;j <Plug>(easymotion-bd-jk)

" vim-smooth-scroll
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

" commentary
autocmd FileType c,cpp setlocal commentstring=//\ %s

" YCM
" Change the dir below when change platform
" let g:ycm_global_ycm_extra_conf = 'D:\\Vim\\.ycm_extra_conf.py'
" let g:ycm_seed_identifiers_with_syntax = 1 " Can complete key words
" let g:ycm_collect_identifiers_from_tag_files = 1 " Use the tags generated by ctags
" let g:ycm_complete_in_comments=1 " Can complete comments
" let g:ycm_complete_in_strings = 1 " Can complete string
" let g:ycm_error_symbol = '>>'
" let g:ycm_warning_symbol = '--'
" let g:ycm_auto_hover = '' " Stop showing preview windows when the cursor in the place
" nnoremap gd :YcmCompleter GoToDeclaration<cr>
" nnoremap gf :YcmCompleter GoToDefinition<cr>
" nnoremap gh :YcmCompleter GoToInclude<cr>

" ultisnips
let g:UltiSnipsExpandTrigger="<c-x>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "mycoolsnippets"]

" auto-pairs
let g:AutoPairsFlyMode = 1

" leaderF
let g:Lf_ShortcutF = "<leader>ff"
let g:Lf_ShortcutB = "<leader>fb"
" Input a dir, and find files under this dir
nnoremap <leader>fd :LeaderfFile 
nnoremap <leader>fm :LeaderfMru<cr>
nnoremap <leader>fc :LeaderfHistoryCmd<cr>
let g:Lf_StlColorscheme = 'default'
let g:Lf_ShowDevIcons = 0
" let g:Lf_StlSeparator = { 'left': '', 'right': '' }
let g:Lf_WindowHeight = 0.30

" tagbar
" nnoremap <silent> <leader>t :TagbarToggle<cr>
" let g:tagbar_autofocus = 1

" vista // N
nnoremap <leader>t :Vista!!<cr>
" let s:icons = {
" \    'func': "\uf794",
" \    'function': "\uf794",
" \    'functions': "\uf794",
" \    'var': "",
" \    'variable': "",
" \    'variables': "",
" \    'const': "\uf8ff",
" \    'constant': "\uf8ff",
" \    'constructor': "\uf976",
" \    'method': "\uf6a6",
" \    'package': "\ue612",
" \    'packages': "\ue612",
" \    'enum': "\uf702",
" \    'enummember': "\uf282",
" \    'enumerator': "\uf702",
" \    'module': "\uf136",
" \    'modules': "\uf136",
" \    'type': "\uf7fd",
" \    'typedef': "\uf7fd",
" \    'types': "\uf7fd",
" \    'field': "\uf30b",
" \    'fields': "\uf30b",
" \    'macro': "\uf8a3",
" \    'macros': "\uf8a3",
" \    'map': "\ufb44",
" \    'class': "\uf0e8",
" \    'augroup': "\ufb44",
" \    'struct': "\uf318",
" \    'union': "\ufacd",
" \    'member': "\uf02b",
" \    'target': "\uf893",
" \    'property': "\ufab6",
" \    'interface': "\uf7fe",
" \    'namespace': "\uf475",
" \    'subroutine': "\uf9af",
" \    'implementation': "\uf776",
" \    'typeParameter': "\uf278",
" \    'default': "\uf29c"
" \}
" let g:vista#renderer#icons = map(extend(s:icons, get(g:, 'vista#renderer#icons', {})), 'tolower(v:val)')
let g:vista#renderer#enable_icon = 0

" tabular
nnoremap <silent> <leader>/ :call CallTabular()<cr>
func! CallTabular()
  let x=nr2char(getchar())
  exec "Tabularize /".x
endfunc
nnoremap <leader>/// :Tab /\/\/<cr>

" taboo
" let g:taboo_tabline = 0
" set sessionoptions+=tabpages,globals
" let g:taboo_tab_format="%f%m"
" let g:taboo_modified_tab_flag="+"
" let g:taboo_renamed_tab_format="[%l]%m"

" clear-f
let g:clever_f_across_no_line=1

" vim-lsp
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'workspace_config': {
        \   'pyls': {
        \     'configurationSources': ['pycodestyle'],
        \     'plugins': {
        \       'pycodestyle': {
        \         'enabled': v:true,
        \         'ignore': ['E2', 'E3']
        \       },
        \     }
        \   }
        \ },
        \ 'allowlist': ['python'],
        \ })
endif
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'allowlist': ['cpp','c'],
        \ })
endif
if executable('svls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'svls',
        \ 'cmd': {server_info->['svls']},
        \ 'whitelist': ['systemverilog', 'verilog'],
        \ })
endif
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 0
let g:lsp_diagnostics_signs_error = {'text': '>>'}
let g:lsp_diagnostics_signs_warning = {'text': '--'}
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_document_code_action_signs_enabled = 0

" asyncomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() . "\<cr>" : "\<cr>"
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
    \ 'name': 'ultisnips',
    \ 'allowlist': ['*'],
    \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))
" au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
"     \ 'name': 'file',
"     \ 'allowlist': ['*'],
"     \ 'priority': 10,
"     \ 'completor': function('asyncomplete#sources#file#completor')
"     \ }))

" Goyo
nnoremap gy :Goyo<cr>
" vimroom
function! s:Goyo_enter()
    set nocursorline
endfunction
" function! s:Goyo_leave()
    " set background=dark
" endfunction
autocmd! User GoyoEnter nested call <SID>Goyo_enter()
" autocmd! User GoyoLeave nested call <SID>Goyo_leave()


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ==>5. F-key function
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Code formating
" Need astyle
" Need autopep8(use pip install)
map <F2> :call FormatCode()<CR>
func! FormatCode()
  exec "w"
  if &filetype == 'c'
    exec "silent !astyle --style=allman -p -n %"
  elseif &filetype == 'cpp'
    exec "silent !astyle --style=allman -p -n %"
  elseif &filetype == 'python'
    exec "silent !autopep8 --in-place --aggressive --aggressive %"
  endif
endfunc

" Compile C/C++ files
" Run python file
" % is filename, %< is file name without suffix
map <F5> :call FunctionF5()<CR>
func FunctionF5()
  exec "w"
  if(&filetype=='c' || &filetype=='cpp')
    exec "silent !g++ % -o main"
  elseif(&filetype=='python')
    exec "!python %"
  elseif(&filetype=='markdown')
    exec "MarkdownPreviewToggle"
  endif
endfunc

" Run the executable file from C/C++ files
map <F6> :call FunctionF6()<CR>
func FunctionF6()
  exec "w"
  if(&filetype=='c' || &filetype=='cpp')
    exec "!main"
  endif
endfunc

" Compile then run(serve for C/C++ files)
map <F8> :call FunctionF8()<CR>
func FunctionF8()
  exec "w"
  if(&filetype=='c' || &filetype=='cpp')
    exec "!g++ % -o main && main"
  endif
endfunc

